# This code is part of Qiskit.
#
# (C) Copyright IBM 2021.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""Test version string generation."""

import typing

from qiskit.test import QiskitTestCase

from qiskit_experiments.autodocs import (
    Reference,
    OptionsField,
    standard_experiment_documentation,
    standard_options_documentation,
)
from qiskit_experiments.base_analysis import BaseAnalysis
from qiskit_experiments.base_experiment import BaseExperiment


#
# Note that this mock class shows how to write docstring with this framework
#


class MockExperiment(BaseExperiment):
    """Very simple description of class. You can write details in the overview section."""

    # this is recommended to fill
    __doc_overview__ = """
Test auto documentation of overview section.

This can be multi-line.
Line feeds in front and end of the text block are removed.


"""

    # if the experiment options are complicated perhaps you can show example codes
    __doc_example__ = """
This is the place to show example code.

For example:

.. code-block::

    from qiskit_experiments import MyExperiment
    
    exp = MyExperiment(**options).run(my_backend)

You can write arbitrary code block or jupyter execute here.
"""

    # this is optional
    __doc_note__ = """
This is a place to write some notification to users.

This appears as bounded box in the documentation.
"""

    # this is optional
    __doc_warning__ = """
This is a place to write warnings if exist.
This block will appear at the top of the documentation.

For example, if the module is still under active development, or being deprecated,
you can communicate these things with users by using this section.
"""

    # this is recommended to fill if exist
    __doc_tutorial__ = "https://my_tutorial.com/this_is_my_experiment"

    # this is recommended to fill if exist
    # the article number is automatically generated by this list index + 1
    # so you can cite this number as, for example, [1] from the overview section
    # The fields of Reference instance are all optional but you should fill at least one
    __doc_references__ = [
        Reference(
            title="My scientific paper title or title of website.",
            authors="Author names.",
            journal_info="Qiskit Experiment publications (2021)",
            open_access_link="https://my_journal_website.com/this_is_my_journal_page",
        )
    ]

    __analysis_class__ = BaseAnalysis

    @classmethod
    def _default_experiment_options(cls):
        return {
            "option1": OptionsField(
                description="This is option1.",
                annotation=typing.Union[str, int],
                default=5,
            ),
            "option2": OptionsField(
                description="""\
This can be multi line text block if we need to show code block.
                
The first line should be without line feed, otherwise empty sentence
will be shown in the option summary in class docstring.
Full text is only shown in the set method docstring.

.. code-block:

    option2 = {"sub_field1": 1, "sub_field2": 2}

You can show code block like this.""",
                annotation=typing.Dict[str, typing.Any],
                default={"sub_field1": 10, "sub_field2": 20},
            ),
            "option3": OptionsField(
                description="If you want show a long text without line feed, "
                "you can split the text like this.",
                annotation=BaseExperiment,
                default=None,
            ),
        }

    def circuits(self, backend=None):
        pass


class TestAutodocs(QiskitTestCase):
    """Test for auto documentation."""

    def test_class_docstring(self):
        """Test if class docstring is correctly generated."""
        # pylint: disable=invalid-name
        self.maxDiff = None

        DocumentedExperiment = standard_experiment_documentation(MockExperiment)
        ref_docs = """\
Very simple description of class. You can write details in the overview section.

Warning:
    This is a place to write warnings if exist.
    This block will appear at the top of the documentation.

    For example, if the module is still under active development, or being deprecated,
    you can communicate these things with users by using this section.

Overview
    Test auto documentation of overview section.

    This can be multi-line.
    Line feeds in front and end of the text block are removed.

Example:
    This is the place to show example code.

    For example:

    .. code-block::

        from qiskit_experiments import MyExperiment

        exp = MyExperiment(**options).run(my_backend)

    You can write arbitrary code block or jupyter execute here.

This experiment uses following analysis class.

Analysis Class Reference
    :py:class:`~qiskit_experiments.base_analysis.BaseAnalysis`

See below configurable experiment options to customize your execution.

.. dropdown:: Experiment Options
    :animate: fade-in-slide-down

    Experiment options to generate circuits. Options can be updated with :py:meth:`set_experiment_options`. See method documentation for details.

    - **option1** (:py:obj:`Union[str, int]`): This is option1.
    - **option2** (:py:obj:`Dict[str, Any]`): This can be multi line text block if we need to show code block.
    - **option3** (:py:obj:`:py:class:`~qiskit_experiments.base_experiment.BaseExperiment``): If you want show a long text without line feed, you can split the text like this.

.. dropdown:: Analysis Options
    :animate: fade-in-slide-down

    Documentation for analysis options are not provided.

References:
    - [1] Author names., `My scientific paper title or title of website.`, Qiskit Experiment publications (2021), `open access <https://my_journal_website.com/this_is_my_journal_page>`_

Note:
    This is a place to write some notification to users.

    This appears as bounded box in the documentation.

See Also:
    - `Qiskit Experiment Tutorial <https://my_tutorial.com/this_is_my_experiment>`_

"""

        self.assertEqual(ref_docs, DocumentedExperiment.__doc__)

    def test_option_method_docstring(self):
        """Test if method docstring and annotations are correctly generated."""
        # pylint: disable=invalid-name
        self.maxDiff = None

        DocumentedExperiment = standard_options_documentation(MockExperiment)

        ref_docs_experiment_options = """\
Set the analysis options for :py:meth:`run` method.

Parameters:
    option1 (:py:obj:`Union[str, int]`):
        This is option1.
        (Default: :py:obj:`5`)
    option2 (:py:obj:`Dict[str, Any]`):
        This can be multi line text block if we need to show code block.

        The first line should be without line feed, otherwise empty sentence
        will be shown in the option summary in class docstring.
        Full text is only shown in the set method docstring.

        .. code-block:

            option2 = {"sub_field1": 1, "sub_field2": 2}

        You can show code block like this.
        (Default: :py:obj:`{'sub_field1': 10, 'sub_field2': 20}`)
    option3 (:py:obj:`:py:class:`~qiskit_experiments.base_experiment.BaseExperiment``):
        If you want show a long text without line feed, you can split the text like this.

Raises:
    AttributeError: If the field passed in is not a supported options.

"""

        self.assertEqual(
            DocumentedExperiment.set_experiment_options.__doc__, ref_docs_experiment_options
        )

        ref_annotation = {
            "option1": typing.Union[str, int],
            "option2": typing.Dict[str, typing.Any],
            "option3": BaseExperiment,
        }
        self.assertDictEqual(
            DocumentedExperiment.set_experiment_options.__annotations__, ref_annotation
        )
