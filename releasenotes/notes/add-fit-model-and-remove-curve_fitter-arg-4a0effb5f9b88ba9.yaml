---
features:
  - |
    :attr:`CurveAnalysis.fit_model` and :attr:`CurveAnalysis.parameters` have been
    added to the curve analysis and its subclasses. These properties return
    :class:`FitModel` instance that represents a fit function of the analysis
    and parameters to be fit with the analysis, respectively.
  - |
    New classes :class:`SingleFitFunction` and :class:`CompositeFitFunction` have been
    added to the curve analysis module. These fit function instance is created for
    each curve analysis subclass, and user can access it via
    the curve analysis property ``.fit_model``.
    Note that the fit function instance can be called by itself, and user can manually test
    the curve beeing computed against given x values and parameters.
    In addition, these function implements pretty printing to describe the function itself.
    These information have been hidden in the private member :attr:`CurveAnalysis.__series__`,
    but now one can easily grasp the fit model details with these fit function object.
upgrade:
  - |
    Analysis option `curve_fitter` of the :class:`CurveAnalysis` has been removed.
    The `curve_fitter` had been a python callable that performs curve fit with given numpy arrays
    and fit functions, which defaulted to
    :func:`~qiskit_experiments.curve_analysis.curve_fit.multi_curve_fit`.
    Becasue of the strict specification of the input and output data format of the function,
    this has been removed from the analysis options and
    now it is integarated as a class method :meth:`CurveAnalysis.curve_fit`.
    This integaration will avoid complicated serialization (no version control is performed
    for functions) and will offer better reproducibility of analysis for future updates.
developer:
  - |
    :meth:`CurveAnalysis.curve_fit` has been added to the curve analysis and
    its subclasses. Now you can directly access the core fitting code
    with bare numpy arrays representing data to be fit.
    This may help debugging of new fit functions.
