# This code is part of Qiskit.
#
# (C) Copyright IBM 2023.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""
Entry for artifact data.
"""

from dataclasses import dataclass, field
from typing import Any, Optional
from datetime import datetime
import json
import uuid

from dateutil import tz

from qiskit_experiments.framework.json import ExperimentEncoder, ExperimentDecoder

@dataclass
class ArtifactData:
    """A dataclass that converts results generated by the analysis class into a payload
    for saving and retrieving to and from the experiments service, which stores this
    as artifacts.

    Types of objects that may be converted to artifacts include fitted and raw data,
    fit status, and any other JSON-based data needed to serialize experiments and experiment data.
    
    Attributes:
        name: The name of the artifact.
        data: The artifact payload.
        artifact_id: Artifact ID. Must be unique in an :class:`ExperimentData` object.
        experiment_id: Experiment ID that the artifact is associated with.
        created_time: Time when the artifact was created.
    """

    _json_encoder = ExperimentEncoder
    _json_decoder = ExperimentDecoder

    name: str
    data: Any
    artifact_id: Optional[str] = field(default_factory=lambda: str(uuid.uuid4()))
    experiment_id: Optional[str] = None
    created_time: Optional[datetime] = field(default_factory=lambda: datetime.now(tz.tzlocal()))

    @property
    def dtype(self):
        """Data type of the payload."""
        return self.data.__class__.__name__

    def __eq__(self, value):
        """Test equality between two instances of ArtifactData."""
        return vars(self) == vars(value)

    def __repr__(self):
        return f"ArtifactData(name={self.name}, dtype={self.dtype}, uid={self.artifact_id}, eid={self.experiment_id})"

    def __json_encode__(self):
        return {
            "name": self.name,
            "data": json.dumps(self.data, cls=self._json_encoder),
            "experiment_id": self.experiment_id,
            "artifact_id": self.artifact_id,
            "created_time": self.created_time.isoformat(),
        }

    @classmethod
    def __json_decode__(cls, value):
        value["data"] = json.loads(value["data"], cls=cls._json_decoder)
        # Recast created_time from str to a datetime timestamp
        value["created_time"] = datetime.fromisoformat(value["created_time"])
        return cls(**value)
